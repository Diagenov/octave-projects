clc;

h = (6.6260755/2/pi) * 10^(-27); % постоянная Планка редуцированная
m = 9.1093897 * 10^(-28);        % масса электрона (г)
e = 4.803 * 10^(-10);            % заряд электрона (СГСЭ)
coef = 1.602564*10^(-12);        % переводной коэфф-т (эрг -> эВ)

%m*e^4/2/h^2/coef % энергия Ридберга * калибровка констант

l = 6 * 10^(-7);  % ширина ямы (см)
a = l/1500;       % шаг (см)
t0 = h^2/2/m/a^2; % коэфф-т в уравнении Шредингера (конечно-разностный метод)

X = (-l/2):a:(l/2); % точки на оси X в яме
L = length(X);      % количество точек


%sin(2*X).^2
%V = 10^(-12)*(1 - exp(-X*5*10^(6) - 0.8)).^2; % потенциал Морзе
V = 0.5*(5*X).^2; % потенциал параболический


A_D1 = 2 * t0 * ones(1, L) + V;                  % диагональ главная
A_D2 = -t0 * ones(1, L - 1);                     % диагонали 1 и -1 от главной
A = diag(A_D1) + diag(A_D2, -1) + diag(A_D2, 1); % матрица оператора Гамильтона (которая умножается на вектор-столбец значений волновой функции в точках)


                   %eig - находить собственные значения и соответствующие им собственные вектора матрицы
%t0*eig(-A)        % элементарные преобразования матрицы не влияют на собственные значения (умножение на число, сложение строк и т.д.) => можно вынести t0
[A, B] = eig(A);  % A - собственные функции (каждый столбец - отдельная функция), B - собственные значения (диагональная матрица, значения на диагонали)
B = diag(B)/coef; % переводим эрг в эВ (?)
A = abs(A).^2;    % плотность вероятности (квадрат модуля волновой функции, уже нормированы на единицу)

%n = 1:1:L;                                  % кол-во точек = кол-во собственных значений
%analiticSolve = h^2/(2*m)*(pi*n/l).^2/coef; % аналитическое решение бесконечной ямы
%plot(analiticSolve, 'r', B, 'b');           % сравнение аналитики и численного решения для ямы с бесконечными стенками


N = 5;


%A ./= 25*max(A, [], 1); % здесь каждый вектор нормируется на свой максимум --> векторы не получится корректно сравнивать между собой
A /= 25*max(A(:));       % чтобы было видно плотности состояний
A += B';                 % размещение на энергетических уровнях

Y_wv = A(:, 1:N);
Y_en = B(1:N) * ones(1, 2); % нужны две точки, чтобы нарисовать прямую

X *= 10^(7); % см --> нм
X -= min(X); % от нуля

x_max = ceil(X(end));
y_max = max(Y_wv(:));


clf;
hold on;
grid on;

set(gca, 'fontsize', 14);

ylabel('Энергия, эВ', 'fontsize', 18);
xlabel('Ширина, нм', 'fontsize', 18);

axis([0, x_max, 0, y_max]);

yticks(0:0.1:100);
xticks(0:1:100);

plot(X, V/coef, "linewidth", 0.5, "color", 'k');
plot([0, x_max], Y_en, '--', "linewidth", 0.5, "color", 'k');
plot(X, Y_wv, "color", 'r');

for i=1:N
  text(10^(8)*a, B(i) - 0.015, sprintf('E_{%d} = %.2f эВ', i, B(i)), "color", 'b', "fontsize", 16);
endfor

plot([x_max, x_max], [0, y_max], "linewidth", 0.5, "color", 'k'); % правая стенка
plot([0,         0], [0, y_max], "linewidth", 0.5, "color", 'k'); % левая стенка
plot([0,     x_max], [0,     0], "linewidth", 0.5, "color", 'k'); % дно
hold off;



% сравнить с гармоническим осциллятором












